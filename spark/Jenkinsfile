#!/usr/bin/groovy
pipeline {
    agent any

    parameters {
        string(name: 'STACK_NAME', defaultValue: 'DriverLocationSpark', description: 'Enter the CloudFormation stack name')
        string(name: 'TEMPLATE_NAME', defaultValue: 'spark/cloudformation/ecs-spark-task-template.yaml', description: 'Enter the path to the stack template file')
        string(name: 'PARAMETERS_FILE', defaultValue: 'spark/cloudformation/stack-parameters.json', description: 'Enter path to parameters file')
        string(name: 'REGION', defaultValue: 'us-west-2', description: 'AWS account region')
        credentials(name: 'CFN_CREDENTIALS_ID', defaultValue: 'arn:aws:iam::557623108041:role/DevJenkinsCloudFormationExecutionRole', description: 'AWS account role', required: true)
    }

    stages {
//         stage('Checkout') {
//             steps {
//                 git url: 'https://github.com/psamsotha-ss/ss-driver-location-streaming.git', branch: 'cicd-jenkins'
//             }
//         }
//
//         stage('Build-Docker-Image') {
// //             when {
// //                 changeset 'spark/**'
// //             }
//             steps {
//                 sh 'docker build --tag ss-spark-kinesis-streaming ./spark'
//             }
//         }
//
//         stage('Push-Docker-Image') {
// //             when {
// //                 changeset 'spark/**'
// //             }
//             environment {
//                 AWS_DEFAULT_REGION = 'us-west-2'
//             }
//             steps {
//                 script {
//                     docker.withRegistry('https://557623108041.dkr.ecr.us-west-2.amazonaws.com', 'ecr:us-west-2:aws_creds') {
//                         docker.image('ss-spark-kinesis-streaming').push()
//                     }
//                 }
//             }
//         }

        stage('Deploy-Cloudformation-Stack') {
//             when {
//                 changeset 'spark/**'
//             }

            steps {
                withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: "aws_user_pass",
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY' ]]) {
                    script {
                        docker.image('amazon/aws-cli:latest').inside("--entrypoint=\"\" -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY") {
                            sh "spark/cloudformation/deploy-stack.sh ${STACK_NAME} ${PARAMETERS_FILE} ${TEMPLATE_NAME} ${REGION}"
                        }
                    }
                }
            }
        }

        stage('Cleanup-Image') {
            when {
                changeset 'spark/**'
            }
            steps {
                sh 'docker system prune -f'
            }
        }
    }
}